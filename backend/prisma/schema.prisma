generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  role     String   @default("student")
  profile  Profile?
}

model Profile {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  department String
  position   String   @default("student")
  profilePic String?
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  Student    Student?
  Advisor    Advisor?
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users String?
}

model Advisor {
  id            Int            @id @default(autoincrement())
  profileId     Int            @unique
  profile       Profile        @relation(fields: [profileId], references: [id])
  students      Student[]
  announcements Announcement[]
  comments      Comment[]
  appointments  Appointment[]
}

model Student {
  id           Int           @id @default(autoincrement())
  studentId    String        @unique
  profileId    Int           @unique
  profile      Profile       @relation(fields: [profileId], references: [id])
  advisorId    Int?
  advisor      Advisor?      @relation(fields: [advisorId], references: [id])
  comments     Comment[]
  appointments Appointment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    String   @default("")
  studentId Int
  advisorId Int
  student   Student  @relation(fields: [studentId], references: [id])
  advisor   Advisor  @relation(fields: [advisorId], references: [id])
  replies   Reply[]
  createdAt DateTime @default(now())
}

model Reply {
  id        Int      @id @default(autoincrement())
  author    String   @default("")
  content   String
  commentId Int
  comment   Comment  @relation(fields: [commentId], references: [id])
  createdAt DateTime @default(now())
}

model Announcement {
  id        Int      @id @default(autoincrement())
  topic     String   @default("")
  content   String   @default("")
  fileUrl   String
  advisorId Int
  advisor   Advisor  @relation(fields: [advisorId], references: [id])
  createdAt DateTime @default(now())
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

model Appointment {
  id            Int               @id @default(autoincrement())
  requestedDate DateTime
  scheduledDate DateTime?
  topic         String
  studentId     Int
  advisorId     Int
  status        AppointmentStatus @default(PENDING)
  student       Student           @relation(fields: [studentId], references: [id])
  advisor       Advisor           @relation(fields: [advisorId], references: [id])
}
